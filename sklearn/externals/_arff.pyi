# =============================================================================
# Federal University of Rio Grande do Sul (UFRGS)
# Connectionist Artificial Intelligence Laboratory (LIAC)
# Renato de Pontes Pereira - rppereira@inf.ufrgs.br
# =============================================================================
# Copyright (c) 2011 Renato de Pontes Pereira, renato.ppontes at gmail dot com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# =============================================================================

__author__: str = ...
__author_email__: str = ...
__version__: str = ...

import re
import csv
from typing import TYPE_CHECKING
from typing import Optional, List, Dict, Any, Iterator, Union, Tuple

# CONSTANTS ===================================================================
_SIMPLE_TYPES: list = ...

_TK_DESCRIPTION: str = ...
_TK_COMMENT: str = ...
_TK_RELATION: str = ...
_TK_ATTRIBUTE: str = ...
_TK_DATA: str = ...

_RE_RELATION = ...
_RE_ATTRIBUTE = ...
_RE_QUOTE_CHARS = ...
_RE_ESCAPE_CHARS = ...
_RE_SPARSE_LINE = ...
_RE_NONTRIVIAL_DATA = ...

ArffDenseDataType = ...
ArffSparseDataType = ...

def _build_re_values() -> Tuple[re.Pattern, re.Pattern]: ...

_RE_DENSE_VALUES, _RE_SPARSE_KEY_VALUES = ...

_ESCAPE_SUB_MAP: dict = ...
_UNESCAPE_SUB_MAP: dict = ...
_UNESCAPE_SUB_MAP: dict = ...

def _escape_sub_callback(match): ...
def _unquote(v): ...
def _parse_values(s): ...

DENSE: int = ...  # Constant value representing a dense matrix
COO: int = ...  # Constant value representing a sparse matrix in coordinate format
LOD: int = ...  # Constant value representing a sparse matrix in list of
# dictionaries format
DENSE_GEN: int = ...  # Generator of dictionaries
LOD_GEN: int = ...  # Generator of dictionaries
_SUPPORTED_DATA_STRUCTURES: list = ...

# EXCEPTIONS ==================================================================
class ArffException(Exception):
    message: Optional[str] = ...

    def __init__(self): ...
    def __str__(self): ...

class BadRelationFormat(ArffException):
    message: str = ...

class BadAttributeFormat(ArffException):
    message: str = ...

class BadDataFormat(ArffException):
    def __init__(self, value): ...

class BadAttributeType(ArffException):
    message: str = ...

class BadAttributeName(ArffException):
    def __init__(self, value, value2): ...

class BadNominalValue(ArffException):
    def __init__(self, value): ...

class BadNominalFormatting(ArffException):
    def __init__(self, value): ...

class BadNumericalValue(ArffException):
    message: str = ...

class BadStringValue(ArffException):
    message: str = ...

class BadLayout(ArffException):
    message: str = ...

    def __init__(self, msg=""): ...

class BadObject(ArffException):
    def __init__(self, msg="Invalid object."): ...
    def __str__(self): ...

# =============================================================================

# INTERNAL ====================================================================
def _unescape_sub_callback(match): ...
def encode_string(s): ...

class EncodedNominalConversor:
    def __init__(self, values): ...
    def __call__(self, value): ...

class NominalConversor:
    def __init__(self, values): ...
    def __call__(self, value): ...

class DenseGeneratorData:
    def decode_rows(self, stream, conversors): ...
    @staticmethod
    def _decode_values(values, conversors): ...
    def encode_data(self, data, attributes): ...

class _DataListMixin:
    def decode_rows(self, stream, conversors): ...

class Data(_DataListMixin, DenseGeneratorData):
    pass

class COOData:
    def decode_rows(self, stream, conversors): ...
    def encode_data(self, data, attributes): ...

class LODGeneratorData:
    def decode_rows(self, stream, conversors): ...
    def encode_data(self, data, attributes): ...

class LODData(_DataListMixin, LODGeneratorData):
    pass

def _get_data_object_for_decoding(matrix_type): ...
def _get_data_object_for_encoding(matrix): ...

# =============================================================================

# ADVANCED INTERFACE ==========================================================
class ArffDecoder:
    def __init__(self): ...
    def _decode_comment(self, s): ...
    def _decode_relation(self, s): ...
    def _decode_attribute(self, s): ...
    def _decode(self, s, encode_nominal=False, matrix_type=DENSE): ...
    def decode(self, s, encode_nominal=False, return_type=...): ...

class ArffEncoder:
    def _encode_comment(self, s=""): ...
    def _encode_relation(self, name): ...
    def _encode_attribute(self, name, type_): ...
    def encode(self, obj): ...
    def iter_encode(self, obj): ...

# =============================================================================

# BASIC INTERFACE =============================================================
def load(fp, encode_nominal=False, return_type=...): ...
def loads(s, encode_nominal=False, return_type=...): ...
def dump(obj, fp): ...
def dumps(obj): ...

# =============================================================================
