from collections.abc import Generator
from typing import Sequence
from numpy.typing import ArrayLike
import types
import warnings
import pickle
import re
from copy import deepcopy
from functools import partial, wraps
from inspect import signature

import numpy as np
from scipy import sparse
from scipy.stats import rankdata
import joblib

from . import IS_PYPY
from .. import config_context
from ._testing import _get_args
from ._testing import assert_raise_message
from ._testing import assert_array_equal
from ._testing import assert_array_almost_equal
from ._testing import assert_allclose
from ._testing import assert_allclose_dense_sparse
from ._testing import assert_array_less
from ._testing import set_random_state
from ._testing import SkipTest
from ._testing import ignore_warnings
from ._testing import create_memmap_backed_data
from ._testing import raises
from . import is_scalar_nan

from ..linear_model import LinearRegression
from ..linear_model import LogisticRegression
from ..linear_model import RANSACRegressor
from ..linear_model import Ridge
from ..linear_model import SGDRegressor

from ..base import (
    clone,
    ClusterMixin,
    is_classifier,
    is_regressor,
    is_outlier_detector,
    RegressorMixin,
)

from ..metrics import accuracy_score, adjusted_rand_score, f1_score
from ..random_projection import BaseRandomProjection
from ..feature_selection import SelectKBest
from ..feature_selection import SelectFromModel
from ..pipeline import make_pipeline
from ..exceptions import DataConversionWarning
from ..exceptions import NotFittedError
from ..exceptions import SkipTestWarning
from ..model_selection import train_test_split
from ..model_selection import ShuffleSplit
from ..model_selection._validation import _safe_split
from ..metrics.pairwise import rbf_kernel, linear_kernel, pairwise_distances
from ..utils.fixes import sp_version
from ..utils.fixes import parse_version
from ..utils.validation import check_is_fitted

from . import shuffle
from ._tags import (
    _DEFAULT_TAGS,
    _safe_tags,
)
from .validation import has_fit_parameter, _num_samples
from ..preprocessing import StandardScaler
from ..preprocessing import scale
from ..datasets import (
    load_iris,
    make_blobs,
    make_multilabel_classification,
    make_regression,
)

REGRESSION_DATASET: None = ...
CROSS_DECOMPOSITION: list = ...

def _yield_checks(estimator): ...
def _yield_classifier_checks(classifier): ...
@ignore_warnings(category=FutureWarning)
def check_supervised_y_no_nan(name, estimator_orig): ...
def _yield_regressor_checks(regressor): ...
def _yield_transformer_checks(transformer): ...
def _yield_clustering_checks(clusterer): ...
def _yield_outliers_checks(estimator): ...
def _yield_all_checks(estimator): ...
def _get_check_estimator_ids(obj): ...
def _construct_instance(Estimator): ...
def _maybe_mark_xfail(estimator, check, pytest): ...
def _maybe_skip(estimator, check): ...
def _should_be_skipped_or_marked(estimator, check): ...
def parametrize_with_checks(estimators: Sequence[Estimator]): ...
def check_estimator(
    estimator: Estimator | None = None,
    generate_only: bool = False,
    Estimator: Estimator = "deprecated",
) -> Generator: ...
def _regression_dataset(): ...
def _set_checking_parameters(estimator): ...

class _NotAnArray:
    def __init__(self, data: ArrayLike): ...
    def __array__(self, dtype=None): ...
    def __array_function__(self, func, types, args, kwargs): ...

def _is_pairwise_metric(estimator): ...
def _pairwise_estimator_convert_X(X, estimator, kernel=linear_kernel): ...
def _generate_sparse_matrix(X_csr): ...
def check_estimator_sparse_data(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_sample_weights_pandas_series(name, estimator_orig): ...
@ignore_warnings(category=(FutureWarning))
def check_sample_weights_not_an_array(name, estimator_orig): ...
@ignore_warnings(category=(FutureWarning))
def check_sample_weights_list(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_sample_weights_shape(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_sample_weights_invariance(name, estimator_orig, kind="ones"): ...
def check_sample_weights_not_overwritten(name, estimator_orig): ...
@ignore_warnings(category=(FutureWarning, UserWarning))
def check_dtype_object(name, estimator_orig): ...
def check_complex_data(name, estimator_orig): ...
@ignore_warnings
def check_dict_unchanged(name, estimator_orig): ...
def _is_public_parameter(attr): ...
@ignore_warnings(category=FutureWarning)
def check_dont_overwrite_parameters(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_fit2d_predict1d(name, estimator_orig): ...
def _apply_on_subsets(func, X): ...
@ignore_warnings(category=FutureWarning)
def check_methods_subset_invariance(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_methods_sample_order_invariance(name, estimator_orig): ...
@ignore_warnings
def check_fit2d_1sample(name, estimator_orig): ...
@ignore_warnings
def check_fit2d_1feature(name, estimator_orig): ...
@ignore_warnings
def check_fit1d(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_transformer_general(name, transformer, readonly_memmap=False): ...
@ignore_warnings(category=FutureWarning)
def check_transformer_data_not_an_array(name, transformer): ...
@ignore_warnings(category=FutureWarning)
def check_transformers_unfitted(name, transformer): ...
def _check_transformer(name, transformer_orig, X, y): ...
@ignore_warnings
def check_pipeline_consistency(name, estimator_orig): ...
@ignore_warnings
def check_fit_score_takes_y(name, estimator_orig): ...
@ignore_warnings
def check_estimators_dtypes(name, estimator_orig): ...
def check_transformer_preserve_dtypes(name, transformer_orig): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_empty_data_messages(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_nan_inf(name, estimator_orig): ...
@ignore_warnings
def check_nonsquare_error(name, estimator_orig): ...
@ignore_warnings
def check_estimators_pickle(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_partial_fit_n_features(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifier_multioutput(name, estimator): ...
@ignore_warnings(category=FutureWarning)
def check_regressor_multioutput(name, estimator): ...
@ignore_warnings(category=FutureWarning)
def check_clustering(name, clusterer_orig, readonly_memmap=False): ...
@ignore_warnings(category=FutureWarning)
def check_clusterer_compute_labels_predict(name, clusterer_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_one_label(name, classifier_orig): ...
@ignore_warnings  # Warnings are raised by decision function
def check_classifiers_train(name, classifier_orig, readonly_memmap=False, X_dtype="float64"): ...
def check_outlier_corruption(num_outliers, expected_outliers, decision): ...
def check_outliers_train(name, estimator_orig, readonly_memmap=True): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_multilabel_representation_invariance(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_multilabel_output_format_predict(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_multilabel_output_format_predict_proba(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_multilabel_output_format_decision_function(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_fit_returns_self(name, estimator_orig, readonly_memmap=False): ...
@ignore_warnings
def check_estimators_unfitted(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_supervised_y_2d(name, estimator_orig): ...
@ignore_warnings
def check_classifiers_predictions(X, y, name, classifier_orig): ...
def _choose_check_classifiers_labels(name, y, y_names): ...
def check_classifiers_classes(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_regressors_int(name, regressor_orig): ...
@ignore_warnings(category=FutureWarning)
def check_regressors_train(name, regressor_orig, readonly_memmap=False, X_dtype=...): ...
@ignore_warnings
def check_regressors_no_decision_function(name, regressor_orig): ...
@ignore_warnings(category=FutureWarning)
def check_class_weight_classifiers(name, classifier_orig): ...
@ignore_warnings(category=FutureWarning)
def check_class_weight_balanced_classifiers(name, classifier_orig, X_train, y_train, X_test, y_test, weights): ...
@ignore_warnings(category=FutureWarning)
def check_class_weight_balanced_linear_classifier(name, Classifier): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_overwrite_params(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_no_attributes_set_in_init(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_sparsify_coefficients(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifier_data_not_an_array(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_regressor_data_not_an_array(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_estimators_data_not_an_array(name, estimator_orig, X, y, obj_type): ...
def check_parameters_default_constructible(name, Estimator): ...
def _enforce_estimator_tags_y(estimator, y): ...
def _enforce_estimator_tags_x(estimator, X): ...
@ignore_warnings(category=FutureWarning)
def check_non_transformer_estimators_n_iter(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_transformer_n_iter(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_get_params_invariance(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_set_params(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_classifiers_regression_target(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_decision_proba_consistency(name, estimator_orig): ...
def check_outliers_fit_predict(name, estimator_orig): ...
def check_fit_non_negative(name, estimator_orig): ...
def check_fit_idempotent(name, estimator_orig): ...
def check_fit_check_is_fitted(name, estimator_orig): ...
def check_n_features_in(name, estimator_orig): ...
def check_requires_y_none(name, estimator_orig): ...
@ignore_warnings(category=FutureWarning)
def check_n_features_in_after_fitting(name, estimator_orig): ...
def check_estimator_get_tags_default_keys(name, estimator_orig): ...
def check_dataframe_column_names_consistency(name, estimator_orig): ...
def check_transformer_get_feature_names_out(name, transformer_orig): ...
def check_transformer_get_feature_names_out_pandas(name, transformer_orig): ...
